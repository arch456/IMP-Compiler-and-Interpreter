
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftANDORleftEQNELTGTLEGEleftPLUSMINUSleftTIMESDIVIDErightUMINUSNOTAND ASSIGN BOOL DIVIDE DO ELSE END EQ GE GET GT ID IF INT LE LT MINUS NE NOT OR PLUS PUT THEN TIMES WHILE\n    program : stmt\n\n    stmt : block\n         | ID ASSIGN aexp ';'\n         | stmt stmt  \n         | GET ID ';'\n         | PUT exp ';'      \n         | IF '(' bexp ')' THEN block opt_else END\n         | WHILE '(' bexp ')' DO block END\n\n    opt_else : ELSE block\n             | empty\n             \n    block : '{' '}'\n          | '{' stmt '}'\n          \n    exp : aexp\n        | bexp\n        \n    bexp : BOOL\n         | aexp EQ aexp\n         | aexp NE aexp\n         | aexp LT aexp\n         | aexp GT aexp\n         | aexp LE aexp\n         | aexp GE aexp\n         | NOT bexp\n         | bexp AND bexp\n         | bexp OR bexp\n         \n    aexp : INT\n         | ID\n         | aexp PLUS aexp\n         | aexp MINUS aexp\n         | aexp TIMES aexp\n         | aexp DIVIDE aexp\n         | MINUS exp %prec UMINUS\n\n    empty :"
    
_lr_action_items = {'ID':([0,2,3,5,6,9,10,11,18,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,46,68,69,],[4,4,-2,12,17,4,4,17,17,17,17,17,-11,4,-5,-6,17,17,17,17,17,17,17,17,17,17,17,17,-12,-3,-8,-7,]),'GET':([0,2,3,9,10,23,24,26,27,45,46,68,69,],[5,5,-2,5,5,-11,5,-5,-6,-12,-3,-8,-7,]),'PUT':([0,2,3,9,10,23,24,26,27,45,46,68,69,],[6,6,-2,6,6,-11,6,-5,-6,-12,-3,-8,-7,]),'IF':([0,2,3,9,10,23,24,26,27,45,46,68,69,],[7,7,-2,7,7,-11,7,-5,-6,-12,-3,-8,-7,]),'WHILE':([0,2,3,9,10,23,24,26,27,45,46,68,69,],[8,8,-2,8,8,-11,8,-5,-6,-12,-3,-8,-7,]),'{':([0,2,3,9,10,23,24,26,27,45,46,61,62,66,68,69,],[9,9,-2,9,9,-11,9,-5,-6,-12,-3,9,9,9,-8,-7,]),'$end':([1,2,3,10,23,26,27,45,46,68,69,],[0,-1,-2,-4,-11,-5,-6,-12,-3,-8,-7,]),'}':([3,9,10,23,24,26,27,45,46,68,69,],[-2,23,-4,-11,45,-5,-6,-12,-3,-8,-7,]),'ASSIGN':([4,],[11,]),'INT':([6,11,18,20,21,22,28,29,30,31,32,33,34,35,36,37,38,39,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'MINUS':([6,11,14,15,16,17,18,19,20,21,22,25,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,],[18,18,29,-14,-25,-26,18,-15,18,18,18,29,18,18,18,18,18,18,18,18,18,18,18,18,-31,-22,29,-27,-28,-29,-30,29,29,29,29,29,29,-23,-24,]),'BOOL':([6,18,20,21,22,38,39,],[19,19,19,19,19,19,19,]),'NOT':([6,18,20,21,22,38,39,],[20,20,20,20,20,20,20,]),'(':([7,8,],[21,22,]),';':([12,13,14,15,16,17,19,25,40,41,47,48,49,50,51,52,53,54,55,56,57,58,],[26,27,-13,-14,-25,-26,-15,46,-31,-22,-27,-28,-29,-30,-16,-17,-18,-19,-20,-21,-23,-24,]),'PLUS':([14,15,16,17,19,25,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,],[28,-14,-25,-26,-15,28,-31,-22,28,-27,-28,-29,-30,28,28,28,28,28,28,-23,-24,]),'TIMES':([14,15,16,17,19,25,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,],[30,-14,-25,-26,-15,30,-31,-22,30,30,30,-29,-30,30,30,30,30,30,30,-23,-24,]),'DIVIDE':([14,15,16,17,19,25,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,],[31,-14,-25,-26,-15,31,-31,-22,31,31,31,-29,-30,31,31,31,31,31,31,-23,-24,]),'EQ':([14,15,16,17,19,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,],[32,-14,-25,-26,-15,-31,-22,32,-27,-28,-29,-30,-16,-17,-18,-19,-20,-21,-23,-24,]),'NE':([14,15,16,17,19,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,],[33,-14,-25,-26,-15,-31,-22,33,-27,-28,-29,-30,-16,-17,-18,-19,-20,-21,-23,-24,]),'LT':([14,15,16,17,19,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,],[34,-14,-25,-26,-15,-31,-22,34,-27,-28,-29,-30,-16,-17,-18,-19,-20,-21,-23,-24,]),'GT':([14,15,16,17,19,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,],[35,-14,-25,-26,-15,-31,-22,35,-27,-28,-29,-30,-16,-17,-18,-19,-20,-21,-23,-24,]),'LE':([14,15,16,17,19,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,],[36,-14,-25,-26,-15,-31,-22,36,-27,-28,-29,-30,-16,-17,-18,-19,-20,-21,-23,-24,]),'GE':([14,15,16,17,19,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,],[37,-14,-25,-26,-15,-31,-22,37,-27,-28,-29,-30,-16,-17,-18,-19,-20,-21,-23,-24,]),'AND':([14,15,16,17,19,40,41,43,44,47,48,49,50,51,52,53,54,55,56,57,58,],[-13,38,-25,-26,-15,-31,-22,38,38,-27,-28,-29,-30,-16,-17,-18,-19,-20,-21,-23,-24,]),'OR':([14,15,16,17,19,40,41,43,44,47,48,49,50,51,52,53,54,55,56,57,58,],[-13,39,-25,-26,-15,-31,-22,39,39,-27,-28,-29,-30,-16,-17,-18,-19,-20,-21,-23,-24,]),')':([14,15,16,17,19,40,41,43,44,47,48,49,50,51,52,53,54,55,56,57,58,],[-13,-14,-25,-26,-15,-31,-22,59,60,-27,-28,-29,-30,-16,-17,-18,-19,-20,-21,-23,-24,]),'ELSE':([23,45,63,],[-11,-12,66,]),'END':([23,45,63,64,65,67,70,],[-11,-12,-32,68,69,-10,-9,]),'THEN':([59,],[61,]),'DO':([60,],[62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt':([0,2,9,10,24,],[2,10,24,10,10,]),'block':([0,2,9,10,24,61,62,66,],[3,3,3,3,3,63,64,70,]),'exp':([6,18,],[13,40,]),'aexp':([6,11,18,20,21,22,28,29,30,31,32,33,34,35,36,37,38,39,],[14,25,14,42,42,42,47,48,49,50,51,52,53,54,55,56,42,42,]),'bexp':([6,18,20,21,22,38,39,],[15,15,41,43,44,57,58,]),'opt_else':([63,],[65,]),'empty':([63,],[67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt','program',1,'p_grammar','IMP_gram.py',17),
  ('stmt -> block','stmt',1,'p_grammar','IMP_gram.py',19),
  ('stmt -> ID ASSIGN aexp ;','stmt',4,'p_grammar','IMP_gram.py',20),
  ('stmt -> stmt stmt','stmt',2,'p_grammar','IMP_gram.py',21),
  ('stmt -> GET ID ;','stmt',3,'p_grammar','IMP_gram.py',22),
  ('stmt -> PUT exp ;','stmt',3,'p_grammar','IMP_gram.py',23),
  ('stmt -> IF ( bexp ) THEN block opt_else END','stmt',8,'p_grammar','IMP_gram.py',24),
  ('stmt -> WHILE ( bexp ) DO block END','stmt',7,'p_grammar','IMP_gram.py',25),
  ('opt_else -> ELSE block','opt_else',2,'p_grammar','IMP_gram.py',27),
  ('opt_else -> empty','opt_else',1,'p_grammar','IMP_gram.py',28),
  ('block -> { }','block',2,'p_grammar','IMP_gram.py',30),
  ('block -> { stmt }','block',3,'p_grammar','IMP_gram.py',31),
  ('exp -> aexp','exp',1,'p_grammar','IMP_gram.py',33),
  ('exp -> bexp','exp',1,'p_grammar','IMP_gram.py',34),
  ('bexp -> BOOL','bexp',1,'p_grammar','IMP_gram.py',36),
  ('bexp -> aexp EQ aexp','bexp',3,'p_grammar','IMP_gram.py',37),
  ('bexp -> aexp NE aexp','bexp',3,'p_grammar','IMP_gram.py',38),
  ('bexp -> aexp LT aexp','bexp',3,'p_grammar','IMP_gram.py',39),
  ('bexp -> aexp GT aexp','bexp',3,'p_grammar','IMP_gram.py',40),
  ('bexp -> aexp LE aexp','bexp',3,'p_grammar','IMP_gram.py',41),
  ('bexp -> aexp GE aexp','bexp',3,'p_grammar','IMP_gram.py',42),
  ('bexp -> NOT bexp','bexp',2,'p_grammar','IMP_gram.py',43),
  ('bexp -> bexp AND bexp','bexp',3,'p_grammar','IMP_gram.py',44),
  ('bexp -> bexp OR bexp','bexp',3,'p_grammar','IMP_gram.py',45),
  ('aexp -> INT','aexp',1,'p_grammar','IMP_gram.py',47),
  ('aexp -> ID','aexp',1,'p_grammar','IMP_gram.py',48),
  ('aexp -> aexp PLUS aexp','aexp',3,'p_grammar','IMP_gram.py',49),
  ('aexp -> aexp MINUS aexp','aexp',3,'p_grammar','IMP_gram.py',50),
  ('aexp -> aexp TIMES aexp','aexp',3,'p_grammar','IMP_gram.py',51),
  ('aexp -> aexp DIVIDE aexp','aexp',3,'p_grammar','IMP_gram.py',52),
  ('aexp -> MINUS exp','aexp',2,'p_grammar','IMP_gram.py',53),
  ('empty -> <empty>','empty',0,'p_empty','IMP_gram.py',59),
]
